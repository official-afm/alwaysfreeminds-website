{"ast":null,"code":"export default {\n  name: 'AnimatedSections',\n  props: {\n    sectionCount: {\n      type: Number,\n      default: 6\n    }\n  },\n  data() {\n    return {\n      sections: [],\n      observer: null\n    };\n  },\n  mounted() {\n    this.initializeSections();\n    this.setupIntersectionObserver();\n  },\n  beforeUnmount() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  },\n  methods: {\n    initializeSections() {\n      this.sections = Array(this.sectionCount).fill().map(() => ({\n        isVisible: false\n      }));\n    },\n    setupIntersectionObserver() {\n      const options = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -100px 0px'\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          const index = parseInt(entry.target.getAttribute('data-index'));\n          if (entry.isIntersecting) {\n            this.sections[index].isVisible = true;\n          }\n        });\n      }, options);\n      this.$nextTick(() => {\n        this.sections.forEach((_, index) => {\n          const element = this.$refs[`section-${index}`]?.[0];\n          if (element) {\n            element.setAttribute('data-index', index);\n            this.observer.observe(element);\n          }\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","props","sectionCount","type","Number","default","data","sections","observer","mounted","initializeSections","setupIntersectionObserver","beforeUnmount","disconnect","methods","Array","fill","map","isVisible","options","threshold","rootMargin","IntersectionObserver","entries","forEach","entry","index","parseInt","target","getAttribute","isIntersecting","$nextTick","_","element","$refs","setAttribute","observe"],"sources":["/home/gregorybarber/alwaysfreeminds-website/src/components/effects/AnimatedSections.vue"],"sourcesContent":["<template>\n  <div class=\"animated-sections\">\n    <!-- Intersection Observer targets for animations -->\n    <div class=\"observer-container\">\n      <div \n        v-for=\"(section, index) in sections\" \n        :key=\"index\"\n        :ref=\"`section-${index}`\"\n        class=\"section-observer\"\n        :class=\"[\n          'transform transition-all duration-1000 ease-out',\n          section.isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n        ]\"\n      >\n        <slot :name=\"`section-${index}`\" :isVisible=\"section.isVisible\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'AnimatedSections',\n  props: {\n    sectionCount: {\n      type: Number,\n      default: 6\n    }\n  },\n  data() {\n    return {\n      sections: [],\n      observer: null\n    }\n  },\n  mounted() {\n    this.initializeSections();\n    this.setupIntersectionObserver();\n  },\n  beforeUnmount() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  },\n  methods: {\n    initializeSections() {\n      this.sections = Array(this.sectionCount).fill().map(() => ({\n        isVisible: false\n      }));\n    },\n    \n    setupIntersectionObserver() {\n      const options = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -100px 0px'\n      };\n      \n      this.observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          const index = parseInt(entry.target.getAttribute('data-index'));\n          if (entry.isIntersecting) {\n            this.sections[index].isVisible = true;\n          }\n        });\n      }, options);\n      \n      this.$nextTick(() => {\n        this.sections.forEach((_, index) => {\n          const element = this.$refs[`section-${index}`]?.[0];\n          if (element) {\n            element.setAttribute('data-index', index);\n            this.observer.observe(element);\n          }\n        });\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.section-observer {\n  min-height: 50px;\n}\n</style>\n"],"mappings":"AAqBA,eAAe;EACbA,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE;IACLC,YAAY,EAAE;MACZC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,yBAAyB,CAAC,CAAC;EAClC,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,CAACK,UAAU,CAAC,CAAC;IAC5B;EACF,CAAC;EACDC,OAAO,EAAE;IACPJ,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAACH,QAAO,GAAIQ,KAAK,CAAC,IAAI,CAACb,YAAY,CAAC,CAACc,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,OAAO;QACzDC,SAAS,EAAE;MACb,CAAC,CAAC,CAAC;IACL,CAAC;IAEDP,yBAAyBA,CAAA,EAAG;MAC1B,MAAMQ,OAAM,GAAI;QACdC,SAAS,EAAE,GAAG;QACdC,UAAU,EAAE;MACd,CAAC;MAED,IAAI,CAACb,QAAO,GAAI,IAAIc,oBAAoB,CAAEC,OAAO,IAAK;QACpDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;UACzB,MAAMC,KAAI,GAAIC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,YAAY,CAAC,YAAY,CAAC,CAAC;UAC/D,IAAIJ,KAAK,CAACK,cAAc,EAAE;YACxB,IAAI,CAACvB,QAAQ,CAACmB,KAAK,CAAC,CAACR,SAAQ,GAAI,IAAI;UACvC;QACF,CAAC,CAAC;MACJ,CAAC,EAAEC,OAAO,CAAC;MAEX,IAAI,CAACY,SAAS,CAAC,MAAM;QACnB,IAAI,CAACxB,QAAQ,CAACiB,OAAO,CAAC,CAACQ,CAAC,EAAEN,KAAK,KAAK;UAClC,MAAMO,OAAM,GAAI,IAAI,CAACC,KAAK,CAAC,WAAWR,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;UACnD,IAAIO,OAAO,EAAE;YACXA,OAAO,CAACE,YAAY,CAAC,YAAY,EAAET,KAAK,CAAC;YACzC,IAAI,CAAClB,QAAQ,CAAC4B,OAAO,CAACH,OAAO,CAAC;UAChC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}