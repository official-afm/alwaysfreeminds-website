{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    user: null,\n    isAuthenticated: false,\n    blogPosts: [],\n    loading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    featuredPosts: state => state.blogPosts.filter(post => post.featured),\n    getPostBySlug: state => slug => state.blogPosts.find(post => post.slug === slug)\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n    },\n    SET_BLOG_POSTS(state, posts) {\n      state.blogPosts = posts;\n    },\n    ADD_BLOG_POST(state, post) {\n      state.blogPosts.unshift(post);\n    },\n    SET_LOADING(state, status) {\n      state.loading = status;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    async fetchBlogPosts({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      try {\n        // This will be replaced with actual API call\n        const mockPosts = [{\n          id: 1,\n          title: \"Finding Purpose After Prison\",\n          slug: \"finding-purpose-after-prison\",\n          excerpt: \"How I discovered my calling and built a meaningful life after serving four years.\",\n          content: \"Full blog post content here...\",\n          category: \"Personal Growth\",\n          author: \"Your Name\",\n          publishedAt: \"2024-01-15\",\n          featured: true,\n          image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop\"\n        }\n        // Add more mock posts as needed\n        ];\n        commit('SET_BLOG_POSTS', mockPosts);\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    async login({\n      commit\n    }, credentials) {\n      commit('SET_LOADING', true);\n      try {\n        // Replace with actual authentication logic\n        const user = {\n          id: 1,\n          name: 'Admin',\n          email: credentials.email\n        };\n        commit('SET_USER', user);\n        return user;\n      } catch (error) {\n        commit('SET_ERROR', error.message);\n        throw error;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    logout({\n      commit\n    }) {\n      commit('SET_USER', null);\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","user","isAuthenticated","blogPosts","loading","error","getters","isLoggedIn","featuredPosts","filter","post","featured","getPostBySlug","slug","find","mutations","SET_USER","SET_BLOG_POSTS","posts","ADD_BLOG_POST","unshift","SET_LOADING","status","SET_ERROR","CLEAR_ERROR","actions","fetchBlogPosts","commit","mockPosts","id","title","excerpt","content","category","author","publishedAt","image","message","login","credentials","name","email","logout"],"sources":["/home/gregorybarber/buy-mind-insights/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    user: null,\n    isAuthenticated: false,\n    blogPosts: [],\n    loading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.user,\n    featuredPosts: state => state.blogPosts.filter(post => post.featured),\n    getPostBySlug: state => slug => state.blogPosts.find(post => post.slug === slug)\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user\n      state.isAuthenticated = !!user\n    },\n    SET_BLOG_POSTS(state, posts) {\n      state.blogPosts = posts\n    },\n    ADD_BLOG_POST(state, post) {\n      state.blogPosts.unshift(post)\n    },\n    SET_LOADING(state, status) {\n      state.loading = status\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    CLEAR_ERROR(state) {\n      state.error = null\n    }\n  },\n  actions: {\n    async fetchBlogPosts({ commit }) {\n      commit('SET_LOADING', true)\n      try {\n        // This will be replaced with actual API call\n        const mockPosts = [\n          {\n            id: 1,\n            title: \"Finding Purpose After Prison\",\n            slug: \"finding-purpose-after-prison\",\n            excerpt: \"How I discovered my calling and built a meaningful life after serving four years.\",\n            content: \"Full blog post content here...\",\n            category: \"Personal Growth\",\n            author: \"Your Name\",\n            publishedAt: \"2024-01-15\",\n            featured: true,\n            image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop\"\n          },\n          // Add more mock posts as needed\n        ]\n        commit('SET_BLOG_POSTS', mockPosts)\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    async login({ commit }, credentials) {\n      commit('SET_LOADING', true)\n      try {\n        // Replace with actual authentication logic\n        const user = { id: 1, name: 'Admin', email: credentials.email }\n        commit('SET_USER', user)\n        return user\n      } catch (error) {\n        commit('SET_ERROR', error.message)\n        throw error\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    logout({ commit }) {\n      commit('SET_USER', null)\n    }\n  }\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}