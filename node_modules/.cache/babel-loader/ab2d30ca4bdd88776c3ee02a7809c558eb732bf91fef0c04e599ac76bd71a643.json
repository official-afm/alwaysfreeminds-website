{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"animated-sections\"\n};\nconst _hoisted_2 = {\n  class: \"observer-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.sections, (section, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      ref_for: true,\n      ref: `section-${index}`,\n      class: _normalizeClass([\"section-observer\", ['transform transition-all duration-1000 ease-out', section.isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8']])\n    }, [_renderSlot(_ctx.$slots, `section-${index}`, {\n      isVisible: section.isVisible\n    }, undefined, true)], 2);\n  }), 128))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","sections","section","index","key","ref","_normalizeClass","isVisible","_renderSlot","_ctx","$slots"],"sources":["/home/gregorybarber/alwaysfreeminds-website/src/components/effects/AnimatedSections.vue"],"sourcesContent":["<template>\n  <div class=\"animated-sections\">\n    <!-- Intersection Observer targets for animations -->\n    <div class=\"observer-container\">\n      <div \n        v-for=\"(section, index) in sections\" \n        :key=\"index\"\n        :ref=\"`section-${index}`\"\n        class=\"section-observer\"\n        :class=\"[\n          'transform transition-all duration-1000 ease-out',\n          section.isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n        ]\"\n      >\n        <slot :name=\"`section-${index}`\" :isVisible=\"section.isVisible\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'AnimatedSections',\n  props: {\n    sectionCount: {\n      type: Number,\n      default: 6\n    }\n  },\n  data() {\n    return {\n      sections: [],\n      observer: null\n    }\n  },\n  mounted() {\n    this.initializeSections();\n    this.setupIntersectionObserver();\n  },\n  beforeUnmount() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  },\n  methods: {\n    initializeSections() {\n      this.sections = Array(this.sectionCount).fill().map(() => ({\n        isVisible: false\n      }));\n    },\n    \n    setupIntersectionObserver() {\n      const options = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -100px 0px'\n      };\n      \n      this.observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          const index = parseInt(entry.target.getAttribute('data-index'));\n          if (entry.isIntersecting) {\n            this.sections[index].isVisible = true;\n          }\n        });\n      }, options);\n      \n      this.$nextTick(() => {\n        this.sections.forEach((_, index) => {\n          const element = this.$refs[`section-${index}`]?.[0];\n          if (element) {\n            element.setAttribute('data-index', index);\n            this.observer.observe(element);\n          }\n        });\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.section-observer {\n  min-height: 50px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAoB;;uBAFjCC,mBAAA,CAgBM,OAhBNC,UAgBM,GAdJC,mBAAA,CAaM,OAbNC,UAaM,I,kBAZJH,mBAAA,CAWMI,SAAA,QAAAC,WAAA,CAVuBC,KAAA,CAAAC,QAAQ,GAA3BC,OAAO,EAAEC,KAAK;yBADxBT,mBAAA,CAWM;MATHU,GAAG,EAAED,KAAK;;MACVE,GAAG,aAAaF,KAAK;MACtBV,KAAK,EAAAa,eAAA,EAAC,kBAAkB,G,mDACyDJ,OAAO,CAACK,SAAS,2D;QAKlGC,WAAA,CAAkEC,IAAA,CAAAC,MAAA,aAA1CP,KAAK;MAAKI,SAAS,EAAEL,OAAO,CAACK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}